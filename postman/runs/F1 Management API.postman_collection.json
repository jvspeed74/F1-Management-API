{
	"info": {
		"_postman_id": "812fe75f-1cff-42ed-8d6b-df023a4a15db",
		"name": "F1 Management API",
		"description": "API documentation for the F1 database based on table schemas.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38129481",
		"_collection_link": "https://i425-team.postman.co/workspace/API-Team-Project~9857191e-0dce-4a5e-9f06-32ca6bbe49c6/collection/38129481-812fe75f-1cff-42ed-8d6b-df023a4a15db?action=share&source=collection_link&creator=38129481"
	},
	"item": [
		{
			"name": "Cars",
			"item": [
				{
					"name": "Get a list of all cars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(car) {\r",
									"        pm.expect(car).to.have.property('id');\r",
									"        pm.expect(car).to.have.property('team_id');\r",
									"        pm.expect(car).to.have.property('model');\r",
									"        pm.expect(car).to.have.property('year');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars"
							]
						}
					},
					"response": [
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"team_id\": 1,\n    \"model\": \"Ferrari 488 GT3\",\n    \"year\": \"2018\"\n  },\n  {\n    \"id\": 1,\n    \"team_id\": 1,\n    \"model\": \"Ferrari 488 GT3\",\n    \"year\": \"2018\"\n  }\n]"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Create a new car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, team_id, model, and year\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('team_id');\r",
									"    pm.expect(responseData).to.have.property('model');\r",
									"    pm.expect(responseData).to.have.property('year');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id and team_id are non-negative integers\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");\r",
									"  pm.expect(responseData.team_id).to.be.a('number').and.to.be.at.least(0, \"team_id should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Model and year must be non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.model).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Model should not be empty\");\r",
									"  pm.expect(responseData.year).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Year should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"team_id\": 3,\n  \"model\": \"Ferrari A210\",\n  \"year\": \"2018\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars"
							]
						}
					},
					"response": [
						{
							"name": "Successfully created a new car",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Get car by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has the required fields - id, team_id, model, and year\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.team_id).to.exist;\r",
									"    pm.expect(responseData.model).to.exist;\r",
									"    pm.expect(responseData.year).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id and team_id are non-negative integers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);\r",
									"    pm.expect(responseData.team_id).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Model and year are non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.model).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Model should not be empty\");\r",
									"  pm.expect(responseData.year).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Year should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint returns a car record matching the provided ID"
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}"
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Update fields for a car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, team_id, model, and year\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('team_id');\r",
									"    pm.expect(responseData).to.have.property('model');\r",
									"    pm.expect(responseData).to.have.property('year');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Model and year must be non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.model).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Model should not be empty\");\r",
									"  pm.expect(responseData.year).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Year should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Team_id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.team_id).to.be.a('number');\r",
									"    pm.expect(responseData.team_id).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Updated Car\",\n  \"year\": \"1988\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint updates a car record in the system."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Delete a car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "8",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint deletes a car record from the system."
					},
					"response": [
						{
							"name": "Car successfully deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Drivers",
			"item": [
				{
					"name": "Get a list of all drivers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(driver) {\r",
									"        pm.expect(driver).to.include.all.keys('id', 'first_name', 'last_name', 'team_id', 'nationality_id', 'birthday', 'driver_number', 'career_points', 'career_wins', 'career_podiums', 'championships');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate non-negative integers for specific properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    responseData.forEach(function(driver) {\r",
									"        pm.expect(driver.id).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.team_id).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.nationality_id).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.driver_number).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.career_points).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.career_wins).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.career_podiums).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.championships).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/drivers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"drivers"
							]
						},
						"description": "This endpoint allows you to get a list of all drivers in the system."
					},
					"response": [
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"first_name\": \"Lewis\",\n    \"last_name\": \"Hamilton\",\n    \"team_id\": 1,\n    \"nationality_id\": 44,\n    \"birthday\": \"1985-01-07\",\n    \"driver_number\": 44,\n    \"career_points\": 4135,\n    \"career_wins\": 103,\n    \"career_podiums\": 182,\n    \"championships\": 7\n  },\n  {\n    \"id\": 1,\n    \"first_name\": \"Lewis\",\n    \"last_name\": \"Hamilton\",\n    \"team_id\": 1,\n    \"nationality_id\": 44,\n    \"birthday\": \"1985-01-07\",\n    \"driver_number\": 44,\n    \"career_points\": 4135,\n    \"career_wins\": 103,\n    \"career_podiums\": 182,\n    \"championships\": 7\n  }\n]"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Create a new driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.first_name).to.exist;\r",
									"    pm.expect(responseData.last_name).to.exist;\r",
									"    pm.expect(responseData.birthday).to.exist;\r",
									"    pm.expect(responseData.driver_number).to.exist;\r",
									"    pm.expect(responseData.team_id).to.exist;\r",
									"    pm.expect(responseData.nationality_id).to.exist;\r",
									"    pm.expect(responseData.career_points).to.exist;\r",
									"    pm.expect(responseData.career_wins).to.exist;\r",
									"    pm.expect(responseData.career_podiums).to.exist;\r",
									"    pm.expect(responseData.championships).to.exist;\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Birthday is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 91,\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/drivers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"drivers"
							]
						},
						"description": "This endpoint allows you to create a new driver in the system."
					},
					"response": [
						{
							"name": "Successfully created a new driver",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Get driver by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.first_name).to.exist;\r",
									"    pm.expect(responseData.last_name).to.exist;\r",
									"    pm.expect(responseData.team_id).to.exist;\r",
									"    pm.expect(responseData.nationality_id).to.exist;\r",
									"    pm.expect(responseData.birthday).to.exist;\r",
									"    pm.expect(responseData.driver_number).to.exist;\r",
									"    pm.expect(responseData.career_points).to.exist;\r",
									"    pm.expect(responseData.career_wins).to.exist;\r",
									"    pm.expect(responseData.career_podiums).to.exist;\r",
									"    pm.expect(responseData.championships).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"First name and last name should be non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.first_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");\r",
									"    pm.expect(responseData.last_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/drivers/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"drivers",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "20",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						}
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}"
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Update fields for a driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('first_name');\r",
									"    pm.expect(responseData).to.have.property('last_name');\r",
									"    pm.expect(responseData).to.have.property('team_id');\r",
									"    pm.expect(responseData).to.have.property('nationality_id');\r",
									"    pm.expect(responseData).to.have.property('birthday');\r",
									"    pm.expect(responseData).to.have.property('driver_number');\r",
									"    pm.expect(responseData).to.have.property('career_points');\r",
									"    pm.expect(responseData).to.have.property('career_wins');\r",
									"    pm.expect(responseData).to.have.property('career_podiums');\r",
									"    pm.expect(responseData).to.have.property('championships');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Birthday is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Tom\",\n  \"last_name\": \"Example\",\n  \"team_id\": 5,\n  \"nationality_id\": 2,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 3,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/drivers/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"drivers",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "16",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint"
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Delete a driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/drivers/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"drivers",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "18",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint allows for the user to delete a specific driver and their correlating details."
					},
					"response": [
						{
							"name": "Driver successfully deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Get a list of all events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, title, scheduled_date, track_id, and status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(event => {\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('title');\r",
									"        pm.expect(event).to.have.property('scheduled_date');\r",
									"        pm.expect(event).to.have.property('track_id');\r",
									"        pm.expect(event).to.have.property('status');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event.id).to.be.a('number').and.to.be.at.least(0, \"ID should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						},
						"description": "This endpoint allows you to get a list of all events in the system and their corresponding properities."
					},
					"response": [
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n    \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n    \"track_id\": 1,\n    \"status\": \"Planned\"\n  },\n  {\n    \"id\": 1,\n    \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n    \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n    \"track_id\": 1,\n    \"status\": \"Planned\"\n  }\n]"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Create a new event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.scheduled_date).to.exist;\r",
									"    pm.expect(responseData.track_id).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Track_id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.track_id).to.be.a('number');\r",
									"    pm.expect(responseData.track_id).to.be.at.least(0, \"Track_id should be a non-negative integer\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"New Event\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						},
						"description": "This endpoint allows you to create a new event in the system. You need to provide the name, date, track_id, and event_type. The `id` field is read-only and will be generated by the system."
					},
					"response": [
						{
							"name": "Successfully created a new event",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Get an event by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, title, scheduled_date, track_id, and status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('id', 'title', 'scheduled_date', 'track_id', 'status');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"ID should be a non-negative integer\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint gets a specific event and it's specific correlating properities."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}"
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Update fields for an event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.scheduled_date).to.exist;\r",
									"    pm.expect(responseData.track_id).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.length.above(0, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Event\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 2,\n  \"status\": \"Cancelled\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint updates a specific field/ property for a specific event."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Delete an event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint alows you to delete a specific event and correlating properties."
					},
					"response": [
						{
							"name": "Event successfully deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				}
			],
			"description": "This endpoint allows you to get a list of all of the events."
		},
		{
			"name": "Tracks",
			"item": [
				{
					"name": "Get a list of all tracks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is in an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(track => {\r",
									"        pm.expect(track).to.have.property('id');\r",
									"        pm.expect(track).to.have.property('name');\r",
									"        pm.expect(track).to.have.property('length_km');\r",
									"        pm.expect(track).to.have.property('continent');\r",
									"        pm.expect(track).to.have.property('country_id');\r",
									"        pm.expect(track).to.have.property('description');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Length_km is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(track) {\r",
									"        pm.expect(track.length_km).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Country_id is a positive integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(track) {\r",
									"        pm.expect(track.country_id).to.be.a('number').above(0);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tracks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracks"
							]
						},
						"description": "This endpoint allows you to get a list of all tracks in the system."
					},
					"response": [
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"name\": \"Circuit de Monaco\",\n    \"length_km\": 3.34,\n    \"continent\": \"Europe\",\n    \"country_id\": 1,\n    \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n  },\n  {\n    \"id\": 1,\n    \"name\": \"Circuit de Monaco\",\n    \"length_km\": 3.34,\n    \"continent\": \"Europe\",\n    \"country_id\": 1,\n    \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n  }\n]"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Create a new track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - name, length_km, continent, country_id, description, id\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('length_km');\r",
									"    pm.expect(responseData).to.have.property('continent');\r",
									"    pm.expect(responseData).to.have.property('country_id');\r",
									"    pm.expect(responseData).to.have.property('description');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Length_km is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.length_km).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Indianapolis Motor Speedway\",\n  \"length_km\": 5.78,\n  \"continent\": \"North America\",\n  \"country_id\": 2,\n  \"description\": \"New Circuit\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tracks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracks"
							]
						},
						"description": "This endpoint allows you to create a new track in the system. You need to provide the name, length in kilometers, and continent. The `id` field is read-only and will be generated by the system."
					},
					"response": [
						{
							"name": "Successfully created a new track",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Get a track by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('length_km');\r",
									"    pm.expect(responseData).to.have.property('continent');\r",
									"    pm.expect(responseData).to.have.property('country_id');\r",
									"    pm.expect(responseData).to.have.property('description');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Length_km is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.length_km).to.exist.and.to.be.at.least(0, \"Length_km should be a non-negative number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tracks/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint let's you retrieve a specific track and it's properities by Id."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}"
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Update fields for a track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, name, length_km, continent, country_id, and description\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('id', 'name', 'length_km', 'continent', 'country_id', 'description');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Length_km is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.length_km).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Continent is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.continent).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Continent should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Country_id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('country_id').that.is.a('number').and.is.at.least(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Track\",\n  \"length_km\": 1.00,\n  \"continent\": \"South America\",\n  \"country_id\": 3,\n  \"description\": \"Updated Track\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tracks/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint updates a specific track and it's correlating properties."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Delete a track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tracks/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "6",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint allows you to delete a specific track and it's correlating properities."
					},
					"response": [
						{
							"name": "Track successfully deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Resource not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				}
			],
			"description": "Endpoints for tracks and their relating information."
		},
		{
			"name": "Teams",
			"item": [
				{
					"name": "Get a list of all teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(team) {",
									"        pm.expect(team).to.have.property('id');",
									"        pm.expect(team).to.have.property('official_name');",
									"        pm.expect(team).to.have.property('short_name');",
									"        pm.expect(team).to.have.property('headquarters');",
									"        pm.expect(team).to.have.property('team_principal');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(team){",
									"        pm.expect(team.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Official_name, short_name, headquarters, and team_principal are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach(function(team) {",
									"        pm.expect(team.official_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Official name should not be empty\");",
									"        pm.expect(team.short_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Short name should not be empty\");",
									"        pm.expect(team.headquarters).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Headquarters should not be empty\");",
									"        pm.expect(team.team_principal).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Team principal should not be empty\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/teams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "This endpoint allows you to get a list of all teams in the system."
					},
					"response": []
				},
				{
					"name": "Create a new Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed syntax and updated response time test\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.official_name).to.exist;\r",
									"    pm.expect(responseData.short_name).to.exist;\r",
									"    pm.expect(responseData.headquarters).to.exist;\r",
									"    pm.expect(responseData.team_principal).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Official name is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.official_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Official name should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"official_name\": \"Mx Racing Team\",\n  \"short_name\": \"RT\",\n  \"headquarters\": \"Arizona, United States of America\",\n  \"team_principal\": \"Tim Radshaw\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "This endpoint allows you to create a new team in the system. You need to provide the official name, short name, headquarters, and team principal. The `id` field is read-only and will be generated by the system."
					},
					"response": []
				},
				{
					"name": "Get team by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.official_name).to.exist;\r",
									"    pm.expect(responseData.short_name).to.exist;\r",
									"    pm.expect(responseData.headquarters).to.exist;\r",
									"    pm.expect(responseData.team_principal).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Official name should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.official_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Short name should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.short_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headquarters should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.headquarters).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Team principal should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.team_principal).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/teams/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update fields for a team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('id', 'official_name', 'short_name', 'headquarters', 'team_principal');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"official_name\": \"Updated Team\",\n  \"short_name\": \"UpTeam\",\n  \"headquarters\": \"Milton Keynes, United Kingdom\",\n  \"team_principal\": \"Tom Manly\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "9",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/teams/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "any"
		}
	]
}