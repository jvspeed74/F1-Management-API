{
	"info": {
		"_postman_id": "2338bf10-a9b3-4279-8666-634aa28e2935",
		"name": "F1 Management API",
		"description": "API documentation for the F1 database based on table schemas.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "38129481-2338bf10-a9b3-4279-8666-634aa28e2935"
	},
	"item": [
		{
			"name": "Cars",
			"item": [
				{
					"name": "Get a list of all cars",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90acbbee-2026-4f0a-a2fd-c383c851cca1",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(car) {\r",
									"        pm.expect(car).to.have.property('id');\r",
									"        pm.expect(car).to.have.property('team_id');\r",
									"        pm.expect(car).to.have.property('model');\r",
									"        pm.expect(car).to.have.property('year');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "12b4d46e-7f94-4005-9cef-cedc6bb531f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars"
							]
						}
					},
					"response": [
						{
							"id": "4b30e574-60e0-474c-8279-b2c03ee60568",
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "f0bf761b-f004-4e64-8d9b-e4bad7c78dcb"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"team_id\": 1,\n    \"model\": \"Ferrari 488 GT3\",\n    \"year\": \"2018\"\n  },\n  {\n    \"id\": 1,\n    \"team_id\": 1,\n    \"model\": \"Ferrari 488 GT3\",\n    \"year\": \"2018\"\n  }\n]"
						},
						{
							"id": "b1ce35b1-8e6d-4847-8146-523fa19d6a69",
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "c8048511-5b32-40a1-83ea-62da42360c1b"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Create a new car",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0db0f398-1f86-4026-b6fd-fc8ce6bbc623",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, team_id, model, and year\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('team_id');\r",
									"    pm.expect(responseData).to.have.property('model');\r",
									"    pm.expect(responseData).to.have.property('year');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id and team_id are non-negative integers\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");\r",
									"  pm.expect(responseData.team_id).to.be.a('number').and.to.be.at.least(0, \"team_id should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Model and year must be non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.model).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Model should not be empty\");\r",
									"  pm.expect(responseData.year).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Year should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "14a4c404-c5b8-4446-848e-6ec30897922e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"team_id\": 3,\n  \"model\": \"Ferrari A210\",\n  \"year\": \"2018\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars"
							]
						}
					},
					"response": [
						{
							"id": "9844337a-f5d6-4faf-93f9-c129f952f3c3",
							"name": "Successfully created a new car",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "aeed9122-d99f-4a34-9d36-f73e3cb6d5a9"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}"
						},
						{
							"id": "c01e4489-02a1-4827-8d3b-c01467ae1bb0",
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "777b7915-5f87-4719-9826-c759ad0b9630"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "2df124f5-d8d0-4567-8f6d-b98b3a563366",
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "d42844dd-3eff-4a31-99a5-8747542fa169"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Get car by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c225c890-204c-4569-a6f6-d0d2d8287990",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has the required fields - id, team_id, model, and year\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.team_id).to.exist;\r",
									"    pm.expect(responseData.model).to.exist;\r",
									"    pm.expect(responseData.year).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id and team_id are non-negative integers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);\r",
									"    pm.expect(responseData.team_id).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Model and year are non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.model).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Model should not be empty\");\r",
									"  pm.expect(responseData.year).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Year should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b52ce029-0d8e-4b86-972d-7953da0f6cea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint returns a car record matching the provided ID"
					},
					"response": [
						{
							"id": "e77c84a4-3b2f-46cf-9516-9b94f27ab5bd",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "6f2a0147-f112-4a24-9b82-f30d98d9a4f5"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}"
						},
						{
							"id": "5e3d3015-c210-452a-9b07-c1b0171d7b2b",
							"name": "Resource not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "d054be9e-7565-44d9-b453-d3bce269848e"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "434e0475-2dc0-4c1e-b459-d6cd79be04ed",
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "ea5e5d7d-d5b8-473e-a6a8-b652ee56fa7f"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Update fields for a car",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5d822cc-3b56-4bc5-a3fe-4abca232838d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, team_id, model, and year\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('team_id');\r",
									"    pm.expect(responseData).to.have.property('model');\r",
									"    pm.expect(responseData).to.have.property('year');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Model and year must be non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.model).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Model should not be empty\");\r",
									"  pm.expect(responseData.year).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Year should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Team_id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.team_id).to.be.a('number');\r",
									"    pm.expect(responseData.team_id).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9362d53c-564d-479a-8ef1-cfd95f4b958e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Updated Car\",\n  \"year\": \"1988\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint updates a car record in the system."
					},
					"response": [
						{
							"id": "9cecb40b-9e37-40a8-8657-f614ad056c03",
							"name": "Successful Response",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "e95d61f6-138f-4ee0-ae86-5f1fe87cc0c5"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}"
						},
						{
							"id": "b90fb795-1e19-4efb-9246-e5652fdb03f2",
							"name": "Bad request",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "7c0721ee-5197-4557-b1d5-3b3fe0e0d499"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "f07c6922-c27e-48a2-87bb-463ff4e0a67d",
							"name": "Resource not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "e3e3bcc6-8e52-4fd8-a6ba-73d57dd318be"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "78600f32-cc8e-4f8a-8e97-926f6eee2c9f",
							"name": "Internal server error",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"team_id\": 1,\n  \"model\": \"Ferrari 488 GT3\",\n  \"year\": \"2018\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "2996442e-4d00-4bdb-94ad-fcee9c3843bf"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Delete a car",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f07b268d-17bc-459b-807c-15d03e0a23cf",
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "267a9abc-1bfc-47f4-b3d5-905db38f7ad0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cars/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cars",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "8",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint deletes a car record from the system."
					},
					"response": [
						{
							"id": "7754831c-2455-4ce9-ae3e-b9bcf129ae80",
							"name": "Car successfully deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"id": "cc0e6903-4143-46c2-a613-6c8711fcbefc",
							"name": "Resource not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "46741800-f259-4ac4-b82e-20d0aa150a7d"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "fab7fbdf-65fe-4d1e-982c-df1816b5d33e",
							"name": "Internal server error",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cars/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "e02c1cb1-6a7d-4eb0-8285-884e26856de8"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				}
			],
			"id": "5503c634-94eb-4cae-bd68-bac2ab6d6919"
		},
		{
			"name": "Drivers",
			"item": [
				{
					"name": "Get a list of all drivers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3ff5958-f7d8-401a-a995-f2bf64e3728c",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(driver) {\r",
									"        pm.expect(driver).to.include.all.keys('id', 'first_name', 'last_name', 'team_id', 'nationality_id', 'birthday', 'driver_number', 'career_points', 'career_wins', 'career_podiums', 'championships');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate non-negative integers for specific properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    responseData.forEach(function(driver) {\r",
									"        pm.expect(driver.id).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.team_id).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.nationality_id).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.driver_number).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.career_points).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.career_wins).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.career_podiums).to.be.a('number').and.to.be.at.least(0);\r",
									"        pm.expect(driver.championships).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2505da09-2277-4b38-9119-8344adaa5b9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/drivers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"drivers"
							]
						},
						"description": "This endpoint allows you to get a list of all drivers in the system."
					},
					"response": [
						{
							"id": "5f33cc21-d1ad-4879-b259-31bc4f6df984",
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "94a69a07-1a9c-4282-925f-1e860a66f9b9"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"first_name\": \"Lewis\",\n    \"last_name\": \"Hamilton\",\n    \"team_id\": 1,\n    \"nationality_id\": 44,\n    \"birthday\": \"1985-01-07\",\n    \"driver_number\": 44,\n    \"career_points\": 4135,\n    \"career_wins\": 103,\n    \"career_podiums\": 182,\n    \"championships\": 7\n  },\n  {\n    \"id\": 1,\n    \"first_name\": \"Lewis\",\n    \"last_name\": \"Hamilton\",\n    \"team_id\": 1,\n    \"nationality_id\": 44,\n    \"birthday\": \"1985-01-07\",\n    \"driver_number\": 44,\n    \"career_points\": 4135,\n    \"career_wins\": 103,\n    \"career_podiums\": 182,\n    \"championships\": 7\n  }\n]"
						},
						{
							"id": "dce37d84-b4b3-474d-9910-e19490988810",
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "301b0314-d8b4-4b6a-b397-fb6f1d02035b"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Create a new driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "710596b4-013c-4ca3-beca-71faa6bb044b",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.first_name).to.exist;\r",
									"    pm.expect(responseData.last_name).to.exist;\r",
									"    pm.expect(responseData.birthday).to.exist;\r",
									"    pm.expect(responseData.driver_number).to.exist;\r",
									"    pm.expect(responseData.team_id).to.exist;\r",
									"    pm.expect(responseData.nationality_id).to.exist;\r",
									"    pm.expect(responseData.career_points).to.exist;\r",
									"    pm.expect(responseData.career_wins).to.exist;\r",
									"    pm.expect(responseData.career_podiums).to.exist;\r",
									"    pm.expect(responseData.championships).to.exist;\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Birthday is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "025f565e-4101-4c93-8736-deabe84d0119",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 91,\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/drivers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"drivers"
							]
						},
						"description": "This endpoint allows you to create a new driver in the system."
					},
					"response": [
						{
							"id": "37d6d108-65ed-4505-b9e2-c003c832cc44",
							"name": "Successfully created a new driver",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "3adf1e42-9bbe-4afd-9ccc-e40c5ccbd92c"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}"
						},
						{
							"id": "7c6bbe7f-0637-4c5d-9728-5721eff7e7f2",
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "6a9d36e0-c351-4b8d-bc80-da9836ded64f"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "1685d8bb-3c73-4e8c-b79e-d9fc39c02998",
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "e0f6afe7-0d6f-47a1-b660-2ceb28a486a1"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Get driver by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9a8c3d7-207b-45de-b75d-fbd576f60ccc",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.first_name).to.exist;\r",
									"    pm.expect(responseData.last_name).to.exist;\r",
									"    pm.expect(responseData.team_id).to.exist;\r",
									"    pm.expect(responseData.nationality_id).to.exist;\r",
									"    pm.expect(responseData.birthday).to.exist;\r",
									"    pm.expect(responseData.driver_number).to.exist;\r",
									"    pm.expect(responseData.career_points).to.exist;\r",
									"    pm.expect(responseData.career_wins).to.exist;\r",
									"    pm.expect(responseData.career_podiums).to.exist;\r",
									"    pm.expect(responseData.championships).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"First name and last name should be non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.first_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");\r",
									"    pm.expect(responseData.last_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0e6908aa-818f-4e1e-9bfc-a9f1935e1196",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/drivers/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"drivers",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "20",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						}
					},
					"response": [
						{
							"id": "b903798a-87af-4be9-9707-4e514c1949a1",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "38a65d9f-6add-43b8-b43f-e64349e2b878"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}"
						},
						{
							"id": "8b0ff4d0-62a6-482c-8f4b-59946046f6a8",
							"name": "Resource not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "e776f09f-2bd9-43f7-965f-c0107bb2c87b"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "9e749f0e-0bf9-4048-aaff-51c2ca0265f8",
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "44436be0-4d6f-4b0a-990e-6a78fa3c1c5d"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Update fields for a driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4b82935-a433-42cb-ae49-570785d97816",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('first_name');\r",
									"    pm.expect(responseData).to.have.property('last_name');\r",
									"    pm.expect(responseData).to.have.property('team_id');\r",
									"    pm.expect(responseData).to.have.property('nationality_id');\r",
									"    pm.expect(responseData).to.have.property('birthday');\r",
									"    pm.expect(responseData).to.have.property('driver_number');\r",
									"    pm.expect(responseData).to.have.property('career_points');\r",
									"    pm.expect(responseData).to.have.property('career_wins');\r",
									"    pm.expect(responseData).to.have.property('career_podiums');\r",
									"    pm.expect(responseData).to.have.property('championships');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Birthday is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "272add4e-a646-4428-9670-fbe7b098a467",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Tom\",\n  \"last_name\": \"Example\",\n  \"team_id\": 5,\n  \"nationality_id\": 2,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 3,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/drivers/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"drivers",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "16",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint"
					},
					"response": [
						{
							"id": "82eb71ff-673d-4c18-b78c-01a33858eadd",
							"name": "Successful Response",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "4e4a8801-1225-40a6-8ee3-4a81eaedbefb"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}"
						},
						{
							"id": "b5debc09-f569-488d-bb5f-96c0761f6450",
							"name": "Bad request",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "bba49155-f078-4078-a3a4-a4a01d68ca54"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "a776cbf2-bf40-4a97-9353-d6ee2e556f84",
							"name": "Resource not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "2b00936a-365f-48f7-971d-193e1c36a0c8"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "20ae79b1-0e5b-406d-abe9-972237d6678e",
							"name": "Internal server error",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"Lewis\",\n  \"last_name\": \"Hamilton\",\n  \"team_id\": 1,\n  \"nationality_id\": 44,\n  \"birthday\": \"1985-01-07\",\n  \"driver_number\": 44,\n  \"career_points\": 4135,\n  \"career_wins\": 103,\n  \"career_podiums\": 182,\n  \"championships\": 7\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "494271e8-d8c6-47b1-9695-4609507ed45c"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Delete a driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb589002-e94e-4098-b938-c0d46bfce49c",
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9bd4066f-0710-46ec-86e6-68dd8b56cc5e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/drivers/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"drivers",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "18",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint allows for the user to delete a specific driver and their correlating details."
					},
					"response": [
						{
							"id": "ddc4a491-6fe5-43c5-af21-2f4557558dfa",
							"name": "Driver successfully deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"id": "2b032246-d4b8-474e-84c0-7b4732fb1c43",
							"name": "Resource not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "d96752fb-7d28-4548-8fbc-e1fa26de2d85"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "29ac76f0-4761-456e-9bc2-4cba81cfd1b8",
							"name": "Internal server error",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/drivers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "1399f92e-c711-4457-b3e9-71986e2146ca"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Search for drivers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef22631d-ce03-46dc-bac9-9d4961bec5db",
								"exec": [
									"// Test that the response status code is 200\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test that the response is in JSON format\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test that the response body is an array\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Test that each item in the array has the required properties\r",
									"pm.test(\"Each item in the array has required properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('first_name');\r",
									"        pm.expect(item).to.have.property('last_name');\r",
									"        pm.expect(item).to.have.property('team_id');\r",
									"        pm.expect(item).to.have.property('nationality_id');\r",
									"        pm.expect(item).to.have.property('birthday');\r",
									"        pm.expect(item).to.have.property('driver_number');\r",
									"        pm.expect(item).to.have.property('career_points');\r",
									"        pm.expect(item).to.have.property('career_wins');\r",
									"        pm.expect(item).to.have.property('career_podiums');\r",
									"        pm.expect(item).to.have.property('championships');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test that the response time is less than 200ms\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "57cbc942-2f51-4669-883e-53d046d488cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/drivers/search?q=Max Verstappen",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"drivers",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Max Verstappen"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "dfbb323e-cc24-49e9-984b-14eab2962ff0"
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Get a list of all events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9cc4a59-dd3f-4b34-8ac8-29561fbb80c2",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, title, scheduled_date, track_id, and status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(event => {\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('title');\r",
									"        pm.expect(event).to.have.property('scheduled_date');\r",
									"        pm.expect(event).to.have.property('track_id');\r",
									"        pm.expect(event).to.have.property('status');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event.id).to.be.a('number').and.to.be.at.least(0, \"ID should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d822fdd0-c741-434c-92d4-465896c23514",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						},
						"description": "This endpoint allows you to get a list of all events in the system and their corresponding properities."
					},
					"response": [
						{
							"id": "05e8e236-2393-44db-a3ee-a09cefd9fa9d",
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "3757795c-5347-4afc-bdea-1f6fb196b5dd"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n    \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n    \"track_id\": 1,\n    \"status\": \"Planned\"\n  },\n  {\n    \"id\": 1,\n    \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n    \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n    \"track_id\": 1,\n    \"status\": \"Planned\"\n  }\n]"
						},
						{
							"id": "c7cb2cbc-b43e-4c11-b0c2-e252a4609eb2",
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "2b91f18a-e1b7-457e-8fce-a2609c82cddc"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Create a new event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "246aba97-df57-4185-a86b-8271c8b01799",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.scheduled_date).to.exist;\r",
									"    pm.expect(responseData.track_id).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Track_id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.track_id).to.be.a('number');\r",
									"    pm.expect(responseData.track_id).to.be.at.least(0, \"Track_id should be a non-negative integer\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b7bc8c36-a5d1-43f6-a075-aafd351a5a5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"New Event\",\n  \"scheduled_date\": \"2024-05-26\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						},
						"description": "This endpoint allows you to create a new event in the system. You need to provide the name, date, track_id, and event_type. The `id` field is read-only and will be generated by the system."
					},
					"response": [
						{
							"id": "a854eddc-5739-418f-9cad-633bbfd4bb4d",
							"name": "Successfully created a new event",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "03d21032-ed33-4711-8802-8fd4a2460fd9"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}"
						},
						{
							"id": "3d4b548f-5b1a-4bba-9bf2-28748178cc4f",
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "93658fd1-1d88-4aaf-931c-087c57f7d07f"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "57d7d09c-8372-4060-9d71-39b7020345bb",
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "b74bfed2-830a-4f32-8af1-90d8a423b9af"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Get an event by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60f59f56-943c-4457-9958-92c721c001be",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, title, scheduled_date, track_id, and status\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('id', 'title', 'scheduled_date', 'track_id', 'status');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"ID should be a non-negative integer\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e43916b7-6066-40e4-bb81-32d6ac680f8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint gets a specific event and it's specific correlating properities."
					},
					"response": [
						{
							"id": "82b149f3-43fe-4e0e-8425-dd08e861ca51",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "3e15d5fb-31de-4e33-9266-e5cab9c01717"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}"
						},
						{
							"id": "4914b095-c985-4847-bed0-2b6371f3912b",
							"name": "Resource not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "d58e7cc9-ee0d-4c12-97fc-11c56dbd14fb"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "4cdfc0d6-1c8c-4df8-8c83-eda74d380ebf",
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "58526693-c51e-4a04-b7ab-6c8d7515ad85"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Update fields for an event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff6133a4-f2a5-43ff-9d10-d1f814d71160",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.scheduled_date).to.exist;\r",
									"    pm.expect(responseData.track_id).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.length.above(0, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bab10a21-e0c8-4422-a114-a04590c5c341",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Event\",\n  \"scheduled_date\": \"2024-05-26\",\n  \"track_id\": 2,\n  \"status\": \"Cancelled\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint updates a specific field/ property for a specific event."
					},
					"response": [
						{
							"id": "b4ef45a3-623b-4f65-a417-090a0d012202",
							"name": "Successful Response",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "1d3a4163-b0bb-42dc-9ecf-8b8f8caef466"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}"
						},
						{
							"id": "9426aacf-cb67-4ab2-ae3c-79235c043e6f",
							"name": "Bad request",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "aab88a59-3314-40ef-bbc8-e713c2794d51"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "6bfca152-29ae-45a5-817d-2fd1e591139e",
							"name": "Resource not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "fb0c60a4-8fd6-47ce-bd7b-4bc299fbd5b3"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "c9c9621d-e76c-4e2c-ae6f-271c2af54b50",
							"name": "Internal server error",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Formula 1 Grand Prix de Monaco 2024\",\n  \"scheduled_date\": \"2024-05-26T18:00:00Z\",\n  \"track_id\": 1,\n  \"status\": \"Planned\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "812a6ffd-fb15-4710-bbf2-4773108905d1"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Delete an event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d59b427-42e5-479b-bb6a-7d63329ed53a",
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c325e1bf-0511-4c72-8a92-a3c754306331",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint alows you to delete a specific event and correlating properties."
					},
					"response": [
						{
							"id": "da3d8b3f-41d2-4abf-9636-45f00fbba59f",
							"name": "Event successfully deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"id": "393dfd74-0068-4fff-9e2e-4d78c293177c",
							"name": "Resource not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "87648639-7857-443e-b3d0-9cecd822db1e"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "f37c646b-6de1-4f93-b974-4aebe083bd37",
							"name": "Internal server error",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "8f89cdda-f11c-4154-b74a-32179d81d714"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				}
			],
			"id": "718d29fb-2196-4b69-ae6e-e0a91a9e3607",
			"description": "This endpoint allows you to get a list of all of the events."
		},
		{
			"name": "Tracks",
			"item": [
				{
					"name": "Get a list of all tracks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cfc58bd-347a-4fb5-a6ba-e8ae7a79aaaa",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is in an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(track => {\r",
									"        pm.expect(track).to.have.property('id');\r",
									"        pm.expect(track).to.have.property('name');\r",
									"        pm.expect(track).to.have.property('length_km');\r",
									"        pm.expect(track).to.have.property('continent');\r",
									"        pm.expect(track).to.have.property('country_id');\r",
									"        pm.expect(track).to.have.property('description');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Length_km is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(track) {\r",
									"        pm.expect(track.length_km).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Country_id is a positive integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(track) {\r",
									"        pm.expect(track.country_id).to.be.a('number').above(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Check response headers\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"    pm.response.to.have.header(\"X-Total-Count\");\r",
									"    pm.response.to.have.header(\"X-Total-Pages\");\r",
									"    pm.response.to.have.header(\"X-Current-Page\");\r",
									"    pm.response.to.have.header(\"X-Items-Per-Page\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dff3ce40-3017-42c3-971c-f22e07dc641c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tracks?page=1&sort_by=name&limit=3&order=desc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracks"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "sort_by",
									"value": "name"
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "order",
									"value": "desc"
								}
							]
						},
						"description": "This endpoint allows you to get a list of all tracks in the system."
					},
					"response": [
						{
							"id": "a802948d-aeec-49fb-9460-3b6aaafafede",
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "a939efbd-0f3a-41d0-8c5a-66b609b8dd83"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"name\": \"Circuit de Monaco\",\n    \"length_km\": 3.34,\n    \"continent\": \"Europe\",\n    \"country_id\": 1,\n    \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n  },\n  {\n    \"id\": 1,\n    \"name\": \"Circuit de Monaco\",\n    \"length_km\": 3.34,\n    \"continent\": \"Europe\",\n    \"country_id\": 1,\n    \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n  }\n]"
						},
						{
							"id": "bf9353c3-0b9b-462e-93d7-5643ed955aaa",
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "98c9d6c6-7157-4882-a55a-9bc77c14210f"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Create a new track",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb4863b1-c187-4c76-b21b-dc48eece0fd7",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - name, length_km, continent, country_id, description, id\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('length_km');\r",
									"    pm.expect(responseData).to.have.property('continent');\r",
									"    pm.expect(responseData).to.have.property('country_id');\r",
									"    pm.expect(responseData).to.have.property('description');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Length_km is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.length_km).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a431a9ba-1360-4088-84bc-aed894a88c2f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Indianapolis Motor Speedway\",\n  \"length_km\": 5.78,\n  \"continent\": \"North America\",\n  \"country_id\": 2,\n  \"description\": \"New Circuit\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tracks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracks"
							]
						},
						"description": "This endpoint allows you to create a new track in the system. You need to provide the name, length in kilometers, and continent. The `id` field is read-only and will be generated by the system."
					},
					"response": [
						{
							"id": "d13ff175-c94c-4efa-b54c-b97f819dd228",
							"name": "Successfully created a new track",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "daad0d77-86cb-4ced-b2ec-2456d9fef1be"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}"
						},
						{
							"id": "d5067cd8-e613-4644-bb7b-69b3ea6294ef",
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "d68fe875-3be8-4390-b4fa-5ac5d4ef20cb"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "ee364f55-b67a-4392-8282-8bd83b5cbcb7",
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "f4c8da0e-5f27-491f-8657-cd6abab92345"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Get a track by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f52e36c2-cec9-4bcf-8cb7-e3d5229db925",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('length_km');\r",
									"    pm.expect(responseData).to.have.property('continent');\r",
									"    pm.expect(responseData).to.have.property('country_id');\r",
									"    pm.expect(responseData).to.have.property('description');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Length_km is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.length_km).to.exist.and.to.be.at.least(0, \"Length_km should be a non-negative number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "031ebcde-4e54-42be-a8a8-5ce28f2475da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tracks/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint let's you retrieve a specific track and it's properities by Id."
					},
					"response": [
						{
							"id": "51d194d5-7645-4493-9dde-493ebd3846e7",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "f2298933-4009-4094-9632-5027e12ba09f"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}"
						},
						{
							"id": "bbbfe7a5-0d9f-4fee-a818-f2ce7899b733",
							"name": "Resource not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "294b6e27-8676-4b23-ac8b-654401b561a5"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "5ce716ba-40a4-46c0-acf9-7d0dede987e6",
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "42a7e557-9161-4b30-a785-8bdc36cc0253"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Update fields for a track",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba84caf-b83f-426e-8601-f2f54f9ba35a",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, name, length_km, continent, country_id, and description\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('id', 'name', 'length_km', 'continent', 'country_id', 'description');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Length_km is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.length_km).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Continent is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.continent).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Continent should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Country_id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('country_id').that.is.a('number').and.is.at.least(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "389e4cfd-ab01-48b8-80ff-0e502d79ab9e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Track\",\n  \"length_km\": 1.00,\n  \"continent\": \"South America\",\n  \"country_id\": 3,\n  \"description\": \"Updated Track\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tracks/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint updates a specific track and it's correlating properties."
					},
					"response": [
						{
							"id": "b360fee8-f035-4f17-aa9e-5da2ea5e3150",
							"name": "Successful Response",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "c13042a5-d170-461d-a3dd-e9eda4f5832b"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}"
						},
						{
							"id": "b2b42a0b-f846-401e-943d-f46535dda72b",
							"name": "Bad request",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "d5e75656-dfee-42f6-8ac2-949a013ea870"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "646618f5-9a0e-4c3f-b7c0-23381fe8c0b5",
							"name": "Resource not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "4f6b6af7-ed03-41c4-a422-052cc414fa3b"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "374fc19f-000d-45c4-917f-f4fd0de9af7d",
							"name": "Internal server error",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Circuit de Monaco\",\n  \"length_km\": 3.34,\n  \"continent\": \"Europe\",\n  \"country_id\": 1,\n  \"description\": \"The Circuit de Monaco is a street circuit laid out on the city streets of Monte Carlo and La Condamine around the harbour of the principality of Monaco.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "a689869f-c8fb-439f-8bda-a42dc8a66e14"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				},
				{
					"name": "Delete a track",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b6afe72-f779-4c5d-8876-7723b2ea0f33",
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a44052e8-2167-4e45-85e7-10f98d3a92fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tracks/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "6",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						},
						"description": "This endpoint allows you to delete a specific track and it's correlating properities."
					},
					"response": [
						{
							"id": "65db09e9-6043-4b74-b749-b8fe165d0a8a",
							"name": "Track successfully deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"id": "f39f2916-135d-42f2-a3ec-faf72fe79b15",
							"name": "Resource not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "bb464a9e-c79c-4b6c-b231-57be6df57b90"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						},
						{
							"id": "7ddcc705-1a4d-4831-bcf6-6188bec72b1f",
							"name": "Internal server error",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracks",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"uuid": "ba88fc2f-17c8-46ca-a7c0-69220c0a40f3"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Error Message\"\n}"
						}
					]
				}
			],
			"id": "d502529f-b9c2-49aa-b26b-260649ce9deb",
			"description": "Endpoints for tracks and their relating information."
		},
		{
			"name": "Teams",
			"item": [
				{
					"name": "Get a list of all teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5c64a88-8ffd-409a-9cdc-de6ff420893d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(team) {",
									"        pm.expect(team).to.have.property('id');",
									"        pm.expect(team).to.have.property('official_name');",
									"        pm.expect(team).to.have.property('short_name');",
									"        pm.expect(team).to.have.property('headquarters');",
									"        pm.expect(team).to.have.property('team_principal');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(team){",
									"        pm.expect(team.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Official_name, short_name, headquarters, and team_principal are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach(function(team) {",
									"        pm.expect(team.official_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Official name should not be empty\");",
									"        pm.expect(team.short_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Short name should not be empty\");",
									"        pm.expect(team.headquarters).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Headquarters should not be empty\");",
									"        pm.expect(team.team_principal).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Team principal should not be empty\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8d9d0397-ddca-428e-b265-8e5227d660b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/teams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "This endpoint allows you to get a list of all teams in the system."
					},
					"response": []
				},
				{
					"name": "Create a new Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c694f472-4ab8-4f6c-8599-6e5bf28490b7",
								"exec": [
									"// Fixed syntax and updated response time test\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.official_name).to.exist;\r",
									"    pm.expect(responseData.short_name).to.exist;\r",
									"    pm.expect(responseData.headquarters).to.exist;\r",
									"    pm.expect(responseData.team_principal).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Official name is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.official_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Official name should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "749ef79e-bc91-474c-a88f-260983c98385",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"official_name\": \"Mx Racing Team\",\n  \"short_name\": \"RT\",\n  \"headquarters\": \"Arizona, United States of America\",\n  \"team_principal\": \"Tim Radshaw\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "This endpoint allows you to create a new team in the system. You need to provide the official name, short name, headquarters, and team principal. The `id` field is read-only and will be generated by the system."
					},
					"response": []
				},
				{
					"name": "Get team by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ac7f44f-c5bf-473e-9446-e5a2a49eb207",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.official_name).to.exist;\r",
									"    pm.expect(responseData.short_name).to.exist;\r",
									"    pm.expect(responseData.headquarters).to.exist;\r",
									"    pm.expect(responseData.team_principal).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Official name should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.official_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Short name should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.short_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headquarters should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.headquarters).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Team principal should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.team_principal).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3a0b8bd8-bb37-4b24-bf22-afb78099e553",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/teams/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update fields for a team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a409ab73-3061-4117-bfaf-4e2f345cf58d",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('id', 'official_name', 'short_name', 'headquarters', 'team_principal');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f1ab3b54-12ab-4c55-bf3e-ae887068105e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"official_name\": \"Updated Team\",\n  \"short_name\": \"UpTeam\",\n  \"headquarters\": \"Milton Keynes, United Kingdom\",\n  \"team_principal\": \"Tom Manly\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/teams/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "9",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f8d1923-0034-455c-9646-355d3d5003e8",
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e54fd553-7855-4612-a48a-202ba0e5f939",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/teams/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10",
									"description": "(Required) Unique identifier for the resource"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "4c64f809-10cd-400b-86cf-3b02bdb22163"
		}
	],
	"variable": [
		{
			"id": "8e980e9c-9307-4ecc-ab05-331a3ea619d0",
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "any"
		}
	]
}