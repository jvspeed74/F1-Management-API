openapi: 3.0.0
info:
  title: F1 Database API
  description: API documentation for the F1 database based on table schemas.
  version: 0.0.0
servers:
  - url: http://localhost:8000
    description: Local server

paths:
  /car:
    get:
      summary: Get a list of all cars
      tags:
        - Cars
      responses:
        '200':
          description: List of car objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/car'

    post:
      summary: Create a new car
      tags:
        - Cars
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                model:
                  type: string
                year:
                  type: string
                  format: date
              required:
                - team_id
                - model
                - year
      responses:
        '201':
          description: Information on the newly created car
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
  /car/{id}:
    get:
      summary: Get car by ID
      tags:
        - Cars
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The car object found in the search
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
    patch:
      summary: Update a car
      tags:
        - Cars
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                model:
                  type: string
                year:
                  type: string
                  format: date
      responses:
        '200':
          description: Car successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
    delete:
      summary: Delete a car by ID
      tags:
        - Cars
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Car successfully deleted

  /drivers:
    get:
      summary: Get a list of all drivers
      tags:
        - Drivers
      responses:
        '200':
          description: List of drivers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/driver'
    post:
      summary: Create a new driver
      tags:
        - Drivers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "Lewis"
                last_name:
                  type: string
                  example: "Hamilton"
                team_id:
                  type: integer
                  example: 1
                nationality_id:
                  type: integer
                  example: 5
                birthday:
                  type: string
                  format: date
                  example: "1985-01-07"
                driver_number:
                  type: integer
                  example: 44
                career_points:
                  type: number
                  example: 4200.5
                career_wins:
                  type: integer
                  example: 103
                career_podiums:
                  type: integer
                  example: 182
                championships:
                  type: integer
                  example: 7
              required:
                - first_name
                - last_name
                - birthday
                - driver_number
      responses:
        '201':
          description: Driver created
  /drivers/{id}:
    get:
      summary: Get driver by ID
      tags:
        - Drivers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Driver retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/driver'
    put:
      summary: Update a specific drivers
      tags:
        - Drivers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/driver'
      responses:
        '200':
          description: drivers updated
    delete:
      summary: Delete a specific drivers
      tags:
        - Drivers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: drivers deleted
  /events:
    get:
      summary: Get list of events
      tags:
        - Events
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
    post:
      summary: Create a new events
      tags:
        - Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event'
      responses:
        '201':
          description: events created
  /events/{id}:
    get:
      summary: Get a specific events
      tags:
        - Events
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: events details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
    put:
      summary: Update a specific events
      tags:
        - Events
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event'
      responses:
        '200':
          description: events updated
    delete:
      summary: Delete a specific events
      tags:
        - Events
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: events deleted
  /results:
    get:
      summary: Get list of results
      tags:
        - Results
      responses:
        '200':
          description: List of results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/result'
    post:
      summary: Create a new results
      tags:
        - Results
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/result'
      responses:
        '201':
          description: results created
  /results/{id}:
    get:
      summary: Get a specific results
      tags:
        - Results
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: results details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
    put:
      summary: Update a specific results
      tags:
        - Results
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/result'
      responses:
        '200':
          description: results updated
    delete:
      summary: Delete a specific results
      tags:
        - Results
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: results deleted
  /teams:
    get:
      summary: Get list of teams
      tags:
        - Teams
      responses:
        '200':
          description: List of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
    post:
      summary: Create a new teams
      tags:
        - Teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/team'
      responses:
        '201':
          description: teams created
  /teams/{id}:
    get:
      summary: Get a specific teams
      tags:
        - Teams
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: teams details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
    put:
      summary: Update a specific teams
      tags:
        - Teams
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/team'
      responses:
        '200':
          description: teams updated
    delete:
      summary: Delete a specific teams
      tags:
        - Teams
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: teams deleted
  /tracks:
    get:
      summary: Get list of tracks
      tags:
        - Tracks
      responses:
        '200':
          description: List of tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/track'
    post:
      summary: Create a new tracks
      tags:
        - Tracks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/track'
      responses:
        '201':
          description: tracks created
  /tracks/{id}:
    get:
      summary: Get a specific tracks
      tags:
        - Tracks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: tracks details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/track'
    put:
      summary: Update a specific tracks
      tags:
        - Tracks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/track'
      responses:
        '200':
          description: tracks updated
    delete:
      summary: Delete a specific tracks
      tags:
        - Tracks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: tracks deleted
components:
  schemas:
    car:
      type: object
      properties:
        id:
          type: integer
          example: 1
        team:
          type: object
          properties:
            id:
              type: integer
              example: 2
            shorthand_name:
              type: string
              example: "Mercedes"
        model:
          type: string
          example: "W12"
        year:
          type: string
          format: date
          example: "2021-01-01"


    driver:
      type: object
      properties:
        id:
          type: integer
          example: 44
        first_name:
          type: string
          example: "Lewis"
        last_name:
          type: string
          example: "Hamilton"
        team:
          type: object
          properties:
            id:
              type: integer
              example: 1
            official_name:
              type: string
              example: "Mercedes-AMG Petronas Formula One Team"
        nationality:
          type: object
          properties:
            id:
              type: integer
              example: 5
            name:
              type: string
              example: "British"
        birthday:
          type: string
          format: date
          example: "1985-01-07"
        driver_number:
          type: integer
          example: 44
        career_points:
          type: number
          example: 4200.5
        career_wins:
          type: integer
          example: 103
        career_podiums:
          type: integer
          example: 182
        championships:
          type: integer
          example: 7

    event:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        scheduled_date:
          type: string
          format: date-time
        track:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        status:
          type: string
          enum:
            - Planned
            - Ongoing
            - Cancelled
            - Completed

    result:
      type: object
      properties:
        event:
          type: object
          properties:
            id:
              type: integer
            title:
              type: string
        driver:
          type: object
          properties:
            id:
              type: integer
            first_name:
              type: string
            last_name:
              type: string
        team:
          type: object
          properties:
            id:
              type: integer
            official_name:
              type: string
        start_pos:
          type: integer
        finish_pos:
          type: integer
        points:
          type: integer
        fastest_lap:
          $ref: '#/components/schemas/timeWithMilliseconds'
        time_on_track:
          $ref: '#/components/schemas/timeWithMilliseconds'
        dnf:
          type: boolean

    team:
      type: object
      properties:
        id:
          type: integer
        full_name:
          type: string
        short_name:
          type: string
        headquarters:
          type: string
        team_principal:
          type: string

    track:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        length_km:
          type: number
        continent:
          type: string
        country:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        description:
          type: string

    country:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    nationality:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    timeWithMilliseconds:
      type: string
      format: time  # Looking for the format: 00:00:00.000
      pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]{1,3})?$'
